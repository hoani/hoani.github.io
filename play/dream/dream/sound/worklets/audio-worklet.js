AudioWorkletProcessor.prototype._o=function(){this._p=true;this.port.onmessage=(_q)=>{if(_q.data==="kill")this._p=false;};};class _r extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1}];}constructor(){super();this._o();}process(_s,_t,parameters){const input=_s[0];const bypass=parameters.bypass;for(let c=0;c<input.length;++c){const _u=input[c];for(let _v=0;_v<_u.length;++_v){const _w=(bypass[_v]!==undefined)?bypass[_v]:bypass[0];
_t[_w][c][_v]=_u[_v];}}return this._p;}}class _x extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"gain",automationRate:"a-rate",defaultValue:1,minValue:0}];}constructor(){super();this._o();}process(_s,_t,parameters){const _y=_s[0];const _z=_s[1];const output=_t[0];const gain=parameters.gain;for(let c=0;c<_z.length;++c){const _u=_z[c];const _A=output[c];for(let _v=0;_v<_u.length;++_v)_A[_v]=_u[_v];}for(let c=0;c<_y.length;++c){const _u=_y[c];const _A=output[c];for(let _v=0;_v<_u.length;
++_v){const _B=(gain[_v]!==undefined)?gain[_v]:gain[0];_A[_v]+=_u[_v]*_B;}}return this._p;}}registerProcessor("audio-bus-input",_r);registerProcessor("audio-bus-output",_x);class _C extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"gain",automationRate:"a-rate",defaultValue:1.0,minValue:0.0},{name:"factor",automationRate:"a-rate",defaultValue:20,minValue:1,maxValue:100},{name:"resolution",automationRate:"a-rate",
defaultValue:8,minValue:2,maxValue:16},{name:"mix",automationRate:"a-rate",defaultValue:0.8,minValue:0.0,maxValue:1.0}];}static _D=[undefined,undefined,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768];constructor(_E){super();this._o();const _F=_E.outputChannelCount[0];this._G=new Float32Array(_F);this._H=new Uint32Array(_F);}process(_s,_t,parameters){const input=_s[0];const output=_t[0];const bypass=parameters.bypass;const gain=parameters.gain;const factor=parameters.factor;const resolution=parameters.resolution;
const mix=parameters.mix;for(let c=0;c<input.length;++c){const _u=input[c];const _A=output[c];for(let _v=0;_v<_u.length;++_v){_A[_v]=_u[_v];if(this._H[c]===0)this._G[c]=_u[_v];const _I=(factor[_v]!==undefined)?factor[_v]:factor[0];++this._H[c];this._H[c]%=_I;const _w=(bypass[_v]!==undefined)?bypass[_v]:bypass[0];if(_w>0.0){continue;}let _J=this._G[c];const _B=(gain[_v]!==undefined)?gain[_v]:gain[0];_J*=_B;_J=Math.max(Math.min(_J,1.0),-1.0);const _K=(resolution[_v]!==undefined)?resolution[_v]:resolution[0];
const max=(_J>0.0)?_C._D[_K]-1:_C._D[_K];_J=Math.round(_J*max)/max;const _L=(mix[_v]!==undefined)?mix[_v]:mix[0];_A[_v]*=(1.0-_L);_A[_v]+=(_J*_L);}}return this._p;}}registerProcessor("bitcrusher-processor",_C);class _M{constructor(_N=1e-3){this.setTime(_N);}setTime(_N){this._O=Math.exp(-1/(_N*sampleRate));}process(_P,_Q){return _P+this._O*(_Q-_P);}}class _R{constructor(_S,_T){this._U=new _M(_S);this._V=new _M(_T);this._W=_S;this._X=_T;}_Y(_N){if(_N===this._W)return;this._U.setTime(_N);this._W=_N;}_Z(_N){
if(_N===this._X)return;this._V.setTime(_N);this._X=_N;}process(_P,_Q){if(_P>_Q)return this._U.process(_P,_Q);else return this._V.process(_P,_Q);}}class __ extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"ingain",automationRate:"a-rate",defaultValue:1,minValue:0},{name:"threshold",automationRate:"a-rate",defaultValue:0.125,minValue:1e-3,maxValue:1},{name:"ratio",automationRate:"a-rate",defaultValue:4,
minValue:1},{name:"attack",automationRate:"a-rate",defaultValue:0.05,minValue:1e-3,maxValue:1e-1},{name:"release",automationRate:"a-rate",defaultValue:0.25,minValue:1e-2,maxValue:1},{name:"outgain",automationRate:"a-rate",defaultValue:1,minValue:0}];}constructor(_01){super();this._o();const _U=__.parameterDescriptors.find(_11=>_11.name==="attack");const _V=__.parameterDescriptors.find(_11=>_11.name==="release");this._21=new _R(_U.defaultValue,_V.defaultValue);this._31=0;}process(_41,_51,_61){const input=_41[0];
const output=_51[0];const bypass=_61.bypass;const ingain=_61.ingain;const outgain=_61.outgain;const threshold=_61.threshold;const ratio=_61.ratio;const attack=_61.attack;const release=_61.release;if(input.length===0)return this._p;for(let _v=0;_v<input[0].length;++_v){let frame=input.map(_71=>_71[_v]);output.forEach((_71,_81)=>{_71[_v]=frame[_81];});const _91=(ingain[_v]!==undefined)?ingain[_v]:ingain[0];frame=frame.map(_a1=>_a1*=_91);const rect=frame.map(_a1=>Math.abs(_a1));const max=Math.max(...rect);const _b1=_c1(max);
const _d1=(threshold[_v]!==undefined)?threshold[_v]:threshold[0];const _e1=_c1(_d1);const _f1=Math.max(0,_b1-_e1);const _U=(attack[_v]!==undefined)?attack[_v]:attack[0];const _V=(release[_v]!==undefined)?release[_v]:release[0];this._21._Y(_U);this._21._Z(_V);this._31=this._21.process(_f1,this._31);const _w=(bypass[_v]!==undefined)?bypass[_v]:bypass[0];if(_w>0)continue;const _K=(ratio[_v]!==undefined)?ratio[_v]:ratio[0];const _g1=(this._31/_K)-this._31;const _B=_h1(_g1);frame=frame.map(_a1=>_a1*=_B);const _i1=(outgain[_v]!==undefined)?outgain[_v]:outgain[0];
frame=frame.map(_a1=>_a1*=_i1);output.forEach((_71,_81)=>{_71[_v]=frame[_81];});}return this._p;}}function _c1(_j1){return 20*Math.log10(_j1);}function _h1(_j1){return Math.pow(10,_j1/20);}registerProcessor("compressor-processor",__);class _k1 extends AudioWorkletProcessor{static _l1=5.0;static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"time",automationRate:"a-rate",defaultValue:0.2,minValue:0.0,maxValue:_k1._l1},{name:"feedback",automationRate:"a-rate",
defaultValue:0.5,minValue:0.0,maxValue:1.0},{name:"mix",automationRate:"a-rate",defaultValue:0.35,minValue:0.0,maxValue:1.0}];}constructor(_E){super();this._o();const _F=_E.outputChannelCount[0];const _m1=(_k1._l1*sampleRate)+1;this.buffer=new Array(_F);this._n1=new Uint32Array(_F);for(let c=0;c<_F;++c)this.buffer[c]=new Float32Array(_m1);}process(_s,_t,parameters){const input=_s[0];const output=_t[0];const bypass=parameters.bypass;const time=parameters.time;const feedback=parameters.feedback;const mix=parameters.mix;
for(let c=0;c<input.length;++c){const _u=input[c];const _A=output[c];for(let _v=0;_v<_u.length;++_v){_A[_v]=_u[_v];const _d1=(time[_v]!==undefined)?time[_v]:time[0];const _o1=this._p1(c,_d1);const _I=(feedback[_v]!==undefined)?feedback[_v]:feedback[0];const _q1=_u[_v]+(_o1*_I);this.write(c,_q1);const _w=(bypass[_v]!==undefined)?bypass[_v]:bypass[0];if(_w>0.0){continue;}const _L=(mix[_v]!==undefined)?mix[_v]:mix[0];_A[_v]*=(1-_L);_A[_v]+=(_o1*_L);}}return this._p;}_p1(_r1,_N){const _s1=_N*sampleRate;let _t1=(this._n1[_r1]-~~_s1);
let _u1=(_t1-1);while(_t1<0)_t1+=this.buffer[_r1].length;while(_u1<0)_u1+=this.buffer[_r1].length;const frac=_s1-~~_s1;const _v1=this.buffer[_r1][_t1];const _w1=this.buffer[_r1][_u1];return _v1+(_w1-_v1)*frac;}write(_r1,_x1){++this._n1[_r1];this._n1[_r1]%=this.buffer[_r1].length;this.buffer[_r1][this._n1[_r1]]=_x1;}}registerProcessor("delay-processor",_k1);class _y1 extends AudioWorkletProcessor{static get parameterDescriptors(){return [];}constructor(){super();this._o();}process(_z1,_A1,_B1){const input=_z1[0];
const _C1=_A1[0];const _D1=_A1[1];for(let c=0;c<input.length;++c){const _u=input[c];const _E1=_C1[c];const _F1=_D1[c];for(let _v=0;_v<_u.length;++_v){_E1[_v]=_u[_v];_F1[_v]=_u[_v];}}return this._p;}}class _G1 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1}];}constructor(){super();this._o();}process(_z1,_A1,_B1){const _y=_z1[0];const _z=_z1[1];const output=_A1[0];const bypass=_B1.bypass;for(let c=0;c<_z.length;++c){
const _H1=_y[c];const _I1=_z[c];const _A=output[c];for(let _v=0;_v<_H1.length;++_v){const _w=(bypass[_v]!==undefined)?bypass[_v]:bypass[0];if(_w>0){_A[_v]=_I1[_v];}else {_A[_v]=_H1[_v];}}}return this._p;}}registerProcessor("eq-input",_y1);registerProcessor("eq-output",_G1);class _J1 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"gain",automationRate:"a-rate",defaultValue:0.5,minValue:0.0}];}constructor(){
super();this._o();}process(_s,_t,parameters){const input=_s[0];const output=_t[0];const bypass=parameters.bypass;const gain=parameters.gain;for(let c=0;c<input.length;++c){const _u=input[c];const _A=output[c];for(let _v=0;_v<_u.length;++_v){_A[_v]=_u[_v];const _w=(bypass[_v]!==undefined)?bypass[_v]:bypass[0];if(_w>0.0){continue;}const _B=(gain[_v]!==undefined)?gain[_v]:gain[0];_A[_v]*=_B;}}return this._p;}}registerProcessor("gain-processor",_J1);class _K1 extends AudioWorkletProcessor{static get parameterDescriptors(){
const _L1=sampleRate*0.45;return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(5000.0,_L1),minValue:10.0,maxValue:_L1},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_E){super();this._o();const _F=_E.outputChannelCount[0];this._M1=0;this._N1=0;this._O1=0;this._P1=0;this._Q1=0;this._R1=new Float32Array(_F);
this._S1=new Float32Array(_F);this._T1=new Float32Array(_F);this._U1=new Float32Array(_F);this._V1=-1;this._W1=-1;this._X1=-1;}process(_s,_t,parameters){const input=_s[0];const output=_t[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _Y1=(freq.length===1&&q.length===1&&gain.length===1);if(_Y1)this._Z1(freq[0],q[0],gain[0]);for(let c=0;c<input.length;++c){const _u=input[c];const _A=output[c];for(let _v=0;_v<_u.length;++_v){if(_Y1===false){const _I=(freq[_v]!==undefined)?freq[_v]:freq[0];
const __1=(q[_v]!==undefined)?q[_v]:q[0];const _B=(gain[_v]!==undefined)?gain[_v]:gain[0];this._Z1(_I,__1,_B);}const _02=this._O1*_u[_v]+this._P1*this._R1[c]+this._Q1*this._S1[c]-this._M1*this._T1[c]-this._N1*this._U1[c];this._S1[c]=this._R1[c];this._R1[c]=_u[_v];this._U1[c]=this._T1[c];this._T1[c]=_02;const _w=(bypass[_v]!==undefined)?bypass[_v]:bypass[0];_A[_v]=(_w>0)?_u[_v]:_02;}}return this._p;}_Z1(_12,_22,_32){if(_12===this._V1&&_22===this._W1&&_32===this._X1)return;const _42=2*Math.PI*_12/sampleRate;
const _52=Math.cos(_42);const _62=Math.sqrt(_32);const _72=_62+1;const _82=_62-1;const _92=_72*_52;const _a2=_82*_52;const _b2=_72-_a2;const _c2=_72+_a2;const alpha=Math.sin(_42)/(2*_22);const _d2=(2*Math.sqrt(_62)*alpha);const _e2=_b2+_d2;const _M1=2*(_82-_92);const _N1=_b2-_d2;const _O1=_62*(_c2+_d2);const _P1=-2*_62*(_82+_92);const _Q1=_62*(_c2-_d2);this._M1=_M1/_e2;this._N1=_N1/_e2;this._O1=_O1/_e2;this._P1=_P1/_e2;this._Q1=_Q1/_e2;this._V1=_12;this._W1=_22;this._X1=_32;}}registerProcessor("hi-shelf-processor",
_K1);class _f2 extends AudioWorkletProcessor{static get parameterDescriptors(){const _g2=sampleRate*0.45;return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"cutoff",automationRate:"a-rate",defaultValue:Math.min(1500.0,_g2),minValue:10.0,maxValue:_g2},{name:"q",automationRate:"a-rate",defaultValue:1.5,minValue:1.0,maxValue:100.0}];}constructor(_E){super();this._o();const _F=_E.outputChannelCount[0];this._M1=0;this._N1=0;this._O1=0;this._P1=0;this._Q1=0;this._R1=new Float32Array(_F);
this._S1=new Float32Array(_F);this._T1=new Float32Array(_F);this._U1=new Float32Array(_F);this._h2=-1;this._W1=-1;}process(_s,_t,parameters){const input=_s[0];const output=_t[0];const bypass=parameters.bypass;const cutoff=parameters.cutoff;const q=parameters.q;const _Y1=(cutoff.length===1&&q.length===1);if(_Y1)this._Z1(cutoff[0],q[0]);for(let c=0;c<input.length;++c){const _u=input[c];const _A=output[c];for(let _v=0;_v<_u.length;++_v){if(_Y1===false){const c=(cutoff[_v]!==undefined)?cutoff[_v]:cutoff[0];const __1=(q[_v]!==undefined)?q[_v]:q[0];
this._Z1(c,__1);}const _02=this._O1*_u[_v]+this._P1*this._R1[c]+this._Q1*this._S1[c]-this._M1*this._T1[c]-this._N1*this._U1[c];this._S1[c]=this._R1[c];this._R1[c]=_u[_v];this._U1[c]=this._T1[c];this._T1[c]=_02;const _w=(bypass[_v]!==undefined)?bypass[_v]:bypass[0];_A[_v]=(_w>0)?_u[_v]:_02;}}return this._p;}_Z1(_i2,_22){if(_i2===this._h2&&_22===this._W1)return;const _42=2*Math.PI*_i2/sampleRate;const alpha=Math.sin(_42)/(2*_22);const _52=Math.cos(_42);const _e2=1+alpha;const _M1=-2*_52;const _N1=1-alpha;const _O1=(1+_52)/2;
const _P1=-1-_52;const _Q1=(1+_52)/2;this._M1=_M1/_e2;this._N1=_N1/_e2;this._O1=_O1/_e2;this._P1=_P1/_e2;this._Q1=_Q1/_e2;this._h2=_i2;this._W1=_22;}}registerProcessor("hpf2-processor",_f2);class _j2 extends AudioWorkletProcessor{static get parameterDescriptors(){const _L1=sampleRate*0.45;return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(500.0,_L1),minValue:10.0,maxValue:_L1},{name:"q",automationRate:"a-rate",defaultValue:1.0,
minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_E){super();this._o();const _F=_E.outputChannelCount[0];this._M1=0;this._N1=0;this._O1=0;this._P1=0;this._Q1=0;this._R1=new Float32Array(_F);this._S1=new Float32Array(_F);this._T1=new Float32Array(_F);this._U1=new Float32Array(_F);this._V1=-1;this._W1=-1;this._X1=-1;}process(_s,_t,parameters){const input=_s[0];const output=_t[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;
const gain=parameters.gain;const _Y1=(freq.length===1&&q.length===1&&gain.length===1);if(_Y1)this._Z1(freq[0],q[0],gain[0]);for(let c=0;c<input.length;++c){const _u=input[c];const _A=output[c];for(let _v=0;_v<_u.length;++_v){if(_Y1===false){const _I=(freq[_v]!==undefined)?freq[_v]:freq[0];const __1=(q[_v]!==undefined)?q[_v]:q[0];const _B=(gain[_v]!==undefined)?gain[_v]:gain[0];this._Z1(_I,__1,_B);}const _02=this._O1*_u[_v]+this._P1*this._R1[c]+this._Q1*this._S1[c]-this._M1*this._T1[c]-this._N1*this._U1[c];
this._S1[c]=this._R1[c];this._R1[c]=_u[_v];this._U1[c]=this._T1[c];this._T1[c]=_02;const _w=(bypass[_v]!==undefined)?bypass[_v]:bypass[0];_A[_v]=(_w>0)?_u[_v]:_02;}}return this._p;}_Z1(_12,_22,_32){if(_12===this._V1&&_22===this._W1&&_32===this._X1)return;const _42=2*Math.PI*_12/sampleRate;const _52=Math.cos(_42);const _62=Math.sqrt(_32);const _72=_62+1;const _82=_62-1;const _92=_72*_52;const _a2=_82*_52;const _b2=_72-_a2;const _c2=_72+_a2;const alpha=Math.sin(_42)/(2*_22);const _d2=(2*Math.sqrt(_62)*alpha);const _e2=_c2+_d2;
const _M1=-2*(_82+_92);const _N1=_c2-_d2;const _O1=_62*(_b2+_d2);const _P1=2*_62*(_82-_92);const _Q1=_62*(_b2-_d2);this._M1=_M1/_e2;this._N1=_N1/_e2;this._O1=_O1/_e2;this._P1=_P1/_e2;this._Q1=_Q1/_e2;this._V1=_12;this._W1=_22;this._X1=_32;}}registerProcessor("lo-shelf-processor",_j2);class _k2 extends AudioWorkletProcessor{static get parameterDescriptors(){const _g2=sampleRate*0.45;return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"cutoff",automationRate:"a-rate",defaultValue:Math.min(500.0,
_g2),minValue:10.0,maxValue:_g2},{name:"q",automationRate:"a-rate",defaultValue:1.5,minValue:1.0,maxValue:100.0}];}constructor(_E){super();this._o();const _F=_E.outputChannelCount[0];this._M1=0;this._N1=0;this._O1=0;this._P1=0;this._Q1=0;this._R1=new Float32Array(_F);this._S1=new Float32Array(_F);this._T1=new Float32Array(_F);this._U1=new Float32Array(_F);this._h2=-1;this._W1=-1;}process(_s,_t,parameters){const input=_s[0];const output=_t[0];const bypass=parameters.bypass;const cutoff=parameters.cutoff;const q=parameters.q;
const _Y1=(cutoff.length===1&&q.length===1);if(_Y1)this._Z1(cutoff[0],q[0]);for(let c=0;c<input.length;++c){const _u=input[c];const _A=output[c];for(let _v=0;_v<_u.length;++_v){if(_Y1===false){const c=(cutoff[_v]!==undefined)?cutoff[_v]:cutoff[0];const __1=(q[_v]!==undefined)?q[_v]:q[0];this._Z1(c,__1);}const _02=this._O1*_u[_v]+this._P1*this._R1[c]+this._Q1*this._S1[c]-this._M1*this._T1[c]-this._N1*this._U1[c];this._S1[c]=this._R1[c];this._R1[c]=_u[_v];this._U1[c]=this._T1[c];this._T1[c]=_02;const _w=(bypass[_v]!==undefined)?bypass[_v]:bypass[0];
_A[_v]=(_w>0)?_u[_v]:_02;}}return this._p;}_Z1(_i2,_22){if(_i2===this._h2&&_22===this._W1)return;const _42=2*Math.PI*_i2/sampleRate;const alpha=Math.sin(_42)/(2*_22);const _52=Math.cos(_42);const _e2=1+alpha;const _M1=-2*_52;const _N1=1-alpha;const _O1=(1-_52)/2;const _P1=1-_52;const _Q1=(1-_52)/2;this._M1=_M1/_e2;this._N1=_N1/_e2;this._O1=_O1/_e2;this._P1=_P1/_e2;this._Q1=_Q1/_e2;this._h2=_i2;this._W1=_22;}}registerProcessor("lpf2-processor",_k2);class _l2 extends AudioWorkletProcessor{static get parameterDescriptors(){
const _L1=sampleRate*0.45;return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(1500.0,_L1),minValue:10.0,maxValue:_L1},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_E){super();this._o();const _F=_E.outputChannelCount[0];this._M1=0;this._N1=0;this._O1=0;this._P1=0;this._Q1=0;this._R1=new Float32Array(_F);
this._S1=new Float32Array(_F);this._T1=new Float32Array(_F);this._U1=new Float32Array(_F);this._V1=-1;this._W1=-1;this._X1=-1;}process(_s,_t,parameters){const input=_s[0];const output=_t[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _Y1=(freq.length===1&&q.length===1&&gain.length===1);if(_Y1)this._Z1(freq[0],q[0],gain[0]);for(let c=0;c<input.length;++c){const _u=input[c];const _A=output[c];for(let _v=0;_v<_u.length;++_v){if(_Y1===false){const _I=(freq[_v]!==undefined)?freq[_v]:freq[0];
const __1=(q[_v]!==undefined)?q[_v]:q[0];const _B=(gain[_v]!==undefined)?gain[_v]:gain[0];this._Z1(_I,__1,_B);}const _02=this._O1*_u[_v]+this._P1*this._R1[c]+this._Q1*this._S1[c]-this._M1*this._T1[c]-this._N1*this._U1[c];this._S1[c]=this._R1[c];this._R1[c]=_u[_v];this._U1[c]=this._T1[c];this._T1[c]=_02;const _w=(bypass[_v]!==undefined)?bypass[_v]:bypass[0];_A[_v]=(_w>0)?_u[_v]:_02;}}return this._p;}_Z1(_12,_22,_32){if(_12===this._V1&&_22===this._W1&&_32===this._X1)return;const _42=2*Math.PI*_12/sampleRate;
const _52=Math.cos(_42);const _62=Math.sqrt(_32);const alpha=Math.sin(_42)/(2*_22);const _m2=alpha/_62;const _n2=alpha*_62;const _e2=1+_m2;const _M1=-2*_52;const _N1=1-_m2;const _O1=1+_n2;const _P1=_M1;const _Q1=1-_n2;this._M1=_M1/_e2;this._N1=_N1/_e2;this._O1=_O1/_e2;this._P1=_P1/_e2;this._Q1=_Q1/_e2;this._V1=_12;this._W1=_22;this._X1=_32;}}registerProcessor("peak-eq-processor",_l2);class _o2{constructor(_p2){this._q2=0;this._r2=0;this.feedback=0;this._s2=0;this.buffer=new Float32Array(_p2);this._t2=0;}process(_x1){
const out=this.buffer[this._t2];this._s2=(this._s2*this._q2)+(out*this._r2);this.buffer[this._t2]=_x1+(this._s2*this.feedback);++this._t2;this._t2%=this.buffer.length;return out;}_u2(_v2){this.feedback=Math.min(Math.max(0,_v2),1);}_w2(_x2){this._q2=Math.min(Math.max(0,_x2),1);this._r2=1-this._q2;}}class _y2{constructor(_p2){this.feedback=0;this.buffer=new Float32Array(_p2);this._t2=0;}process(_x1){const out=this.buffer[this._t2];this.buffer[this._t2]=_x1+(out*this.feedback);++this._t2;this._t2%=this.buffer.length;
return(out-_x1);}_u2(_v2){this.feedback=Math.min(Math.max(0,_v2),1);}}class _z2 extends AudioWorkletProcessor{static _A2=8;static _B2=4;static _C2=0.015;static _D2=0.4;static _E2=0.28;static _F2=0.7;static _G2=[1116,1188,1277,1356,1422,1491,1557,1617];static _H2=[1139,1211,1300,1379,1445,1514,1580,1640];static _I2=[556,441,341,225];static _J2=[579,464,364,248];static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"size",automationRate:"a-rate",
defaultValue:0.7,minValue:0.0,maxValue:1.0},{name:"damp",automationRate:"a-rate",defaultValue:0.1,minValue:0.0,maxValue:1.0},{name:"mix",automationRate:"a-rate",defaultValue:0.35,minValue:0.0,maxValue:1.0}];}constructor(_E){super();this._o();const _F=_E.outputChannelCount[0];this._K2=-1;this._L2=-1;this._M2=new Array(_F);this._N2=new Array(_F);const _O2=[_z2._G2,_z2._H2];const _P2=[_z2._I2,_z2._J2];for(let c=0;c<_F;++c){this._M2[c]=new Array(_z2._A2);this._N2[c]=new Array(_z2._B2);for(let i=0;i<_z2._A2;++i)this._M2[c][i]=new _o2(_O2[c%_O2.length][i]);
for(let i=0;i<_z2._B2;++i)this._N2[c][i]=new _y2(_P2[c%_P2.length][i]);}this._Q2(0.5);this._w2(0.5);for(let c=0;c<_F;++c)for(let i=0;i<_z2._B2;++i)this._N2[c][i]._u2(0.5);}process(_s,_t,parameters){const input=_s[0];const output=_t[0];const bypass=parameters.bypass;const size=parameters.size;const damp=parameters.damp;const mix=parameters.mix;for(let c=0;c<input.length;++c){const _u=input[c];const _A=output[c];for(let _R2=0;_R2<_u.length;++_R2){const _v=(size[_R2]!==undefined)?size[_R2]:size[0];const _S2=(damp[_R2]!==undefined)?damp[_R2]:damp[0];
this._Q2(_v);this._w2(_S2);_A[_R2]=_u[_R2];let out=0;const _J=_u[_R2]*_z2._C2;for(let i=0;i<_z2._A2;++i)out+=this._M2[c][i].process(_J);for(let i=0;i<_z2._B2;++i)out=this._N2[c][i].process(out);const _w=(bypass[_R2]!==undefined)?bypass[_R2]:bypass[0];if(_w>0.0){continue;}const _L=(mix[_R2]!==undefined)?mix[_R2]:mix[0];_A[_R2]*=(1-_L);_A[_R2]+=(out*_L);}}return this._p;}_Q2(_p2){if(_p2===this._K2)return;const size=(_p2*_z2._E2)+_z2._F2;for(let c=0;c<this._M2.length;++c)for(let i=0;i<_z2._A2;++i)this._M2[c][i]._u2(size);
this._K2=_p2;}_w2(_x2){if(_x2===this._L2)return;const damp=_x2*_z2._D2;for(let c=0;c<this._M2.length;++c)for(let i=0;i<_z2._A2;++i)this._M2[c][i]._w2(damp);this._L2=_x2;}}registerProcessor("reverb1-processor",_z2);class _T2 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"rate",automationRate:"a-rate",defaultValue:5.0,minValue:0.0,maxValue:20.0},{name:"intensity",automationRate:"a-rate",defaultValue:1.0,
minValue:0.0,maxValue:1.0},{name:"offset",automationRate:"a-rate",defaultValue:0.0,minValue:0.0,maxValue:1.0},{name:"shape",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:4}];}constructor(_E){super();this._o();const _F=_E.outputChannelCount[0];this._U2=new Array(_F).fill(1.0);this._V2=new Array(_F).fill(0.0);this._W2=new Array(_F).fill(_X2._Y2._Z2);this.__2=new Array(_F);for(let c=0;c<_F;++c){this.__2[c]=new _03();this.__2[c]._13(sampleRate);this.__2[c]._23(this._U2[c]);this.__2[c]._33(this._W2[c]);
if(c%2===1){this.__2[c]._43(this._V2[c]);}}}process(_s,_t,parameters){const input=_s[0];const output=_t[0];const bypass=parameters.bypass;const rate=parameters.rate;const intensity=parameters.intensity;const offset=parameters.offset;const shape=parameters.shape;for(let c=0;c<input.length;++c){const _u=input[c];const _A=output[c];for(let _v=0;_v<_u.length;++_v){_A[_v]=_u[_v];const _K=(rate[_v]!==undefined)?rate[_v]:rate[0];const _53=(offset[_v]!==undefined)?offset[_v]:offset[0];const _63=(shape[_v]!==undefined)?shape[_v]:shape[0];
this._73(c,_K,_53,_63);const _83=this.__2[c]._p1();const _w=(bypass[_v]!==undefined)?bypass[_v]:bypass[0];if(_w>0.0){continue;}const i=(intensity[_v]!==undefined)?intensity[_v]:intensity[0];const out=_u[_v]*_83*i;_A[_v]*=(1.0-i);_A[_v]+=out;}}return this._p;}_73(_r1,_93,_a3,_b3){if(_93!==this._U2[_r1]){this.__2[_r1]._23(_93);this._U2[_r1]=_93;}if(_a3!==this._V2[_r1]){if(_r1%2===1){this.__2[_r1]._43(_a3);}this._V2[_r1]=_a3;}if(_b3!==this._W2[_r1]){this.__2[_r1]._33(_b3);this._W2[_r1]=_b3;}}}registerProcessor("tremolo-processor",
_T2);function _X2(){}_X2._Y2={_Z2:0,_c3:1,_d3:2,_e3:3,_f3:4,_g3:5};_X2._h3=function(_i3){return 1.0-_i3;};_X2._j3=function(_i3){return _i3;};_X2._k3=function(_i3){return 0.5*(Math.sin((_i3*2.0*Math.PI)-(Math.PI/2.0))+1.0);};_X2._l3=function(_i3){if(_i3<0.5){return 0.0;}return 1.0;};_X2._m3=function(_i3){if(_i3<0.5){return 2.0*_i3;}return 2.0-(2.0*_i3);};_X2._n3=[_X2._h3,_X2._j3,_X2._k3,_X2._l3,_X2._m3];_o3._p3=512;_o3._q3=1.0/_o3._p3;function _o3(_r3){this.data=new Float32Array(_o3._p3);for(let i=0;i<_o3._p3;
++i){this.data[i]=_r3(i*_o3._q3);}}_o3.prototype._p1=function(_i3){_i3=Math.max(0.0,_i3);_i3=Math.min(_i3,1.0);const _s3=_i3*_o3._p3;const _t3=~~_s3;const _u3=_s3-_t3;let _t1=_t3;let _u1=_t1+1;if(_t1>=_o3._p3){_t1-=_o3._p3;}if(_u1>=_o3._p3){_u1-=_o3._p3;}const _v1=this.data[_t1];const _w1=this.data[_u1];return _v1+(_w1-_v1)*_u3;};_03._v3=[];_03._w3=false;_03._x3=0.0;_03._L1=20.0;function _03(){this._y3=48000;this.shape=_X2._Y2._d3;this.freq=1.0;this._z3=0.0;this._q3=0.0;this._A3=0.0;if(_03._w3==true){return;
}for(let i=0;i<_X2._Y2._g3;++i){_03._v3[i]=new _o3(_X2._n3[i]);}_03._w3=true;}_03._B3=function(){return(_03._w3==true);};_03.prototype._13=function(_C3){this._y3=_C3;this._D3();};_03.prototype._23=function(_12){_12=Math.max(_03._x3,_12);_12=Math.min(_12,_03._L1);this.freq=_12;this._D3();};_03.prototype._43=function(_a3){_a3=Math.max(0.0,_a3);_a3=Math.min(_a3,1.0);const _E3=_a3-this._A3;this._A3=_a3;this._z3+=_E3;while(this._z3>=1.0){this._z3-=1.0;}while(this._z3<0.0){this._z3+=1.0;}};_03.prototype._33=function(_b3){
_b3=Math.max(0,_b3);_b3=Math.min(_b3,_X2._Y2._g3-1);this.shape=_b3;};_03.prototype._p1=function(){const result=_03._v3[this.shape]._p1(this._z3);this._z3+=this._q3;while(this._z3>=1.0){this._z3-=1.0;}return result;};_03.prototype._D3=function(){this._q3=this.freq/this._y3;};